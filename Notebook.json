{"paragraphs":[{"text":"%md\n# Combining data from multiple locations\nIn this demo we'll show how BDM Notebook can be used for working with **data stored in multiple locations** - in this case on `hdfs` and in `MySQL` database.\n\n## About the data\n_Disclaimer: This dataset is completely artificial, it has been generated programatically based on arbitrary input_\n\nThe `USERS` table contains records about a students's name, his/her id and a label called category. Value in the 'category' column dependens on which one of 2 classes he/she attends. The `edges.csv` file on the other hand contains records about user connections - each row contains 2 student ids of the students coworking on a project.\n\nStudents are allowed to find a colleague for their project not just in the same class they attends, but also in the other class. We'll use this dataset to get an idea how frequent such cross-class colaborations are.\n\n## Required Action\nPlease, add to the beginning of this Note paragraph(s) that load the following DataFrames into spark-context:\n* `graphText` - DataFrame pointing to the CSV file with graph edges (stored on HDFS)\n* `jdbcDF` - DataFrame pointing to the table containing info about individual students (the USERS table in MySQl)\n\nThese DataFrames will be processed by the remaining paragraphs in this Note.","user":"anonymous","onBehalfOf":"zdenek","dateUpdated":"2018-03-12T16:14:12+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1520859450294_-1226339578","id":"20180309-125713_248006170","dateCreated":"2018-03-12T12:57:30+0000","dateStarted":"2018-03-12T13:03:49+0000","dateFinished":"2018-03-12T13:03:49+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1468"},{"text":"import org.apache.spark.sql.functions.col\n/* \n * Class representing a graph edge - a connection between two users. \n * Each record in the CSV file corresponds to an instance of this class.\n */\ncase class Edge(\n    idStart: Integer,\n    idEnd: Integer\n)\n\n/* Parse the CSV file into a DataFrame consisting of instances of the Edge class */\nval edges = graphText\n    .map(s => s.split(\",\"))\n    .filter(s => s.size == 2)\n    .filter(s => s(0) != \"id\")\n    .map(s => Edge(\n            s(0).toInt,\n            s(1).toInt\n        )\n    )\n    .toDF()\n    .as(\"edges\")\n/* Count the number of student projects (e.g. number of edges in the graph) */\nval edgeCount = edges.count()\n\n/* Assign the loaded MySQL table the alias 'users' for convenience when referencing it's columns. */\nval users = jdbcDF.as(\"users\")\n\n/* Merge the two DataFrames based on user ids. */\nvar friendsDF = edges\n    .join(\n        users, \n        col(\"users.id\") === col(\"edges.idStart\"), \n        \"inner\"\n    )\n    .select(col(\"users.id\"), col(\"users.name\"), col(\"users.category\"), col(\"edges.idEnd\").as(\"friend\"))\n    .as(\"merged\")\n    .join(\n        users, \n        col(\"merged.friend\") === col(\"users.id\"), \n        \"inner\"\n    )\n    .select(\n        col(\"merged.id\"), col(\"merged.name\"), col(\"merged.category\"), \n        col(\"users.id\").as(\"friend_id\"), col(\"users.name\").as(\"friend_name\"), col(\"users.category\").as(\"friend_category\")\n    )\n    .as(\"friends\")\nfriendsDF.persist()\nfriendsDF.registerTempTable(\"FRIENDS\")\n\nval intraClassEdgeCount = friendsDF.where(\"category = friend_category\").count()\nval interClassEdgeCount = friendsDF.where(\"category != friend_category\").count()","dateUpdated":"2018-03-12T12:57:30+0000","config":{"lineNumbers":true,"tableHide":true,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":6,"editorMode":"ace/mode/scala","results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1520859450294_-1226339578","id":"20180309-120737_1290905369","dateCreated":"2018-03-12T12:57:30+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1469"},{"text":"%sql\nselect * from FRIENDS \nwhere \n    category = \"${category=,0(class_0)|1(class_1)}\"","dateUpdated":"2018-03-12T12:57:30+0000","config":{"editorSetting":{"language":"sql","editOnDblClick":false},"colWidth":6,"editorMode":"ace/mode/sql","runOnSelectionChange":true,"results":{"0":{"graph":{"mode":"table","height":426,"optionOpen":false}}},"enabled":true},"settings":{"params":{"class 0|class 1,class 0|class 1":"","class_0|class_1,class_0|class_1":"","fields":["1"],"category":"1"},"forms":{"category":{"name":"category","defaultValue":"","options":[{"value":"0","displayName":"class_0","$$hashKey":"object:1655"},{"value":"1","displayName":"class_1","$$hashKey":"object:1656"}],"hidden":false,"$$hashKey":"object:1647"}}},"apps":[],"jobName":"paragraph_1520859450295_-1226724327","id":"20180303-105408_426315715","dateCreated":"2018-03-12T12:57:30+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1470"},{"text":"{\n    /* The curly brackets are a trick to surpress printing of commands' responses \n    (such as values assigned to a variable etc.) */\n    friendsDF.unpersist()\n    val intraPerc = 100 * intraClassEdgeCount / edgeCount\n    val interPerc = 100 * interClassEdgeCount / edgeCount\n    println(s\"Number of projects in total: ${edgeCount}\")\n    println(s\"Number of same-class projetcs: ${intraClassEdgeCount} (${intraPerc}%)\")\n    println(s\"Number of cross-class projetcs: ${interClassEdgeCount} (${interPerc}%)\")\n}","dateUpdated":"2018-03-12T12:57:30+0000","config":{"lineNumbers":true,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":6,"editorMode":"ace/mode/scala","results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1520859450297_-1229032820","id":"20180312-073136_1079881240","dateCreated":"2018-03-12T12:57:30+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1471"},{"title":"The End","text":"","dateUpdated":"2018-03-12T12:57:30+0000","config":{"tableHide":true,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":6,"editorMode":"ace/mode/scala","editorHide":true,"title":true,"results":{},"enabled":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1520859450298_-1227878574","id":"20180309-124231_422117518","dateCreated":"2018-03-12T12:57:30+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1472"}],"name":"zdenek/graph - template","id":"2D94T5YGM","angularObjects":{"2CV5KXW15:shared_process":[],"2CVGJ22NM::2D94T5YGM":[],"2CUQXW47P::2D94T5YGM":[],"2CW329WX7::2D94T5YGM":[],"2CVM5UKE4::2D94T5YGM":[],"2CXJNN7EB::2D94T5YGM":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}
